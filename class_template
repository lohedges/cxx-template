#!/usr/bin/env bash

# class_template:
# A simple bash script to create C++ Header and Source file templates.
# The user must specify the name of the new Class. Optionally, the user
# can also specify a path where the files will be moved afrer they are
# created, e.g. src.

# Copyright (c) 2014, 2015  Lester Hedges <lester.hedges@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check for Bash version 4+.
if [ $(echo $BASH_VERSION | cut -c 1) -lt 4 ]
then
    echo "class_template requires Bash version 4+"
    exit 1
fi

PATH_SET=false

# Check arguments.
if [ $# -lt 1 ]
then
    echo "Usage: $(basename $0) ClassName"
    echo "       $(basename $0) ClassName path"
    exit 1
fi

# Check whether a path is specified.
if [ $# -eq 2 ]
then
	PATH_SET=true
fi

# Create Header and Source names.
header_file="${1}.h"
source_file="${1}.cpp"

# Check to see if Header already exists.
if [ "$PATH_SET" == "true" ]
then
    if [ -f "$2/$header_file" ]
    then
        echo "Header file: $2/$header_file already exists!"
        exit 1
    fi
else
    if [ -f "$header_file" ]
    then
        echo "Header file: $header_file already exists!"
        exit 1
    fi
fi

# Check to see if Source already exists.
if [ "$PATH_SET" == "true" ]
then
    if [ -f "$2/$source_file" ]
    then
        echo "Source file: $2/$source_file already exists!"
        exit 1
    fi
else
    if [ -f "$source_file" ]
    then
        echo "Source file: $source already exists!"
        exit 1
    fi
fi

#-------- Write Header file --------#

# Write comments.
echo "/*" > $header_file
echo -e " * File:\t$header_file" >> $header_file
echo -e " * Author:\t$USER" >> $header_file
echo " */" >> $header_file
echo >> $header_file

# Open include guards.
echo "#ifndef _${1^^}_H" >> $header_file
echo "#define _${1^^}_H" >> $header_file
echo >> $header_file

# Write class template with constructor and destructor stubs.
echo "class $1" >> $header_file
echo "{" >> $header_file
echo "public:" >> $header_file
echo -e "\t${1}();" >> $header_file
echo -e "\t~${1}();" >> $header_file
echo "};" >> $header_file
echo >> $header_file

# Close include guards.
echo -e "#endif\t/* _${1^^}_H */" >> $header_file

#-------- Write Source file --------#

# Write comments.
echo "/*" > $source_file
echo -e " * File:\t$source_file" >> $source_file
echo -e " * Author:\t$USER" >> $source_file
echo " */" >> $source_file
echo >> $source_file

# Include Header file.
echo "#include \"$header_file\"" >> $source_file
echo >> $source_file

# Write blank constructor.
echo "$1::$1() {}" >> $source_file
echo >> $source_file

# Write blank destructor.
echo "$1::~$1() {}" >> $source_file

#-------- Copy files to user path --------#

if [ "$PATH_SET" == "true" ]
then
    if [ -d "$2" ]
    then
        mv $header_file "$2"/$header_file
        mv $source_file "$2"/$source_file
    else
        echo "Warning: output path doesn't exist, files not moved!"
    fi
fi
